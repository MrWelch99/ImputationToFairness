from data.objects.Data import Data
from sklearn.preprocessing import OrdinalEncoder
import numpy as np

	
class Adult(Data):
    def __init__(self):
        Data.__init__(self)
        self.dataset_name = 'adult'
        self.class_attr = 'income-per-year'
        self.positive_class_val = '>50K'
        self.sensitive_attrs = ['race', 'sex']
        self.privileged_class_names = ['White', 'Male']
        self.categorical_features = [ 'workclass', 'education', 'marital-status', 'occupation', 
                                      'relationship', 'native-country' ]
        self.features_to_keep = [ 'age', 'workclass', 'education', 'education-num', 'marital-status',
                                  'occupation', 'relationship', 'race', 'sex', 'capital-gain',
                                  'capital-loss', 'hours-per-week', 'native-country',
                                  'income-per-year' ]
        self.categorical_nominal_features = ['workclass','marital-status','occupation', 'relationship', 'native-country','education']
        self.categorical_ordinal_features = []
        self.missing_val_indicators = [' ?']

    def convert_ordinal_2_numerical(self, dataframe):
        '''
        This function will correct problems with the scalling of categorical ordinal features
        '''
        #Get ordinal features from dataset
        ordinal_features = self.get_categorical_ordinal_features() 

        ordered_education = [' Preschool',' 1st-4th',' 5th-6th',' 7th-8th',' 9th',' 10th',' 11th',' 12th',' HS-grad',' Some-college','Bachelors',' Masters',' Assoc-acdm',' Assoc-voc',' Doctorate',' Prof-school']
        
        #Ordinal Encoder
        encoder = OrdinalEncoder(categories=[ordered_education])

        ordinal_dict = {}  
        for feature in ordinal_features:
            temp = dataframe[feature].values.reshape(-1, 1)
            dataframe[feature]=encoder.fit_transform(temp)
            #print(dataframe[feature])

            ordinal_dict[feature] = encoder.categories_

        return dataframe, ordinal_dict

    def convert_numerical_2_ordinal(self, dataframe, ordinal_dict):
        '''
        This function will correct problems with the scalling of categorical ordinal features
        '''

        #Get ordinal features from dataset
        ordinal_features = self.get_categorical_ordinal_features()

        for feature in ordinal_features:
            new_col_values = []
            for item in dataframe[feature]:
                if not np.isnan(item):
                    new_col_values.append(ordinal_dict[feature][0][int(item)])
                else:
                    new_col_values.append(np.nan)
            
            dataframe[feature] = new_col_values

        return dataframe
